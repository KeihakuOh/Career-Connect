version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: careerconnect-postgres
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-jobhunting_db}
    ports:
      - '${DB_PORT:-5432}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
      - ./backend/migrations:/app/migrations
      - ./scripts:/app/scripts
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - careerconnect-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: careerconnect-backend
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-jobhunting_db}
      JWT_SECRET: ${JWT_SECRET:-secret}
      SERVER_PORT: ${SERVER_PORT:-8080}
      ENV: ${ENV:-development}
    ports:
      - '${SERVER_PORT:-8080}:8080'
    volumes:
      - ./backend:/app
      - backend_modules:/go/pkg/mod
    networks:
      - careerconnect-network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: ${FRONTEND_TARGET:-development}
    container_name: careerconnect-frontend
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8080/api}
      NODE_ENV: ${NODE_ENV:-development}
    ports:
      - '${FRONTEND_PORT:-3000}:3000'
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    networks:
      - careerconnect-network
    restart: unless-stopped

networks:
  careerconnect-network:
    driver: bridge

volumes:
  postgres_data:
  backend_modules:
  frontend_node_modules:
